html2xml = xmlRoot(parsedHTML)
html2xml[[10]]
?read.fwf
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url,destfile = "./Quiz2_Q5.for",method = "curl")
forfile = read.fwf("./Quiz2_Q5.for", widths, sep=" ", as.is = FALSE,
skip = 0)
forfile = read.fwf("./Quiz2_Q5.for", sep=" ", as.is = FALSE,
)
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = FALSE,
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = FALSE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ")
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
?readLines
urlhtml = con("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
urlhtml = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(urlhtml)
close(urlhtml)
htmlCode
htmlCode[1]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 2)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 3)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 4)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 3)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 4)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
skip = 2,col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
skip = 2,col.names )
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2,col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4") )
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1, skip = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url,destfile = "./Quiz2_Q5.for",method = "curl")
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) , row.names = 1,
skip = 2)
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,4,4,4,4,4,4,4,4) , row.names = 1,
skip = 4)
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, row.names = 1, col.names = c("Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, row.names = 1, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4,row.names = "Week" , col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
sum(forfile$Nino3SST)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "b7bdc4df5eb0df020aa9ab966b747ef7ed1a4f90")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "b7bdc4df5eb0df020aa9ab966b747ef7ed1a4f90")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages('httpuv')
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
library("httpuv")
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4873d2f8fb0c3040facd",
secret = "c7da282ce84ae8a6472a2ddc937103c59d99f6df")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
content(req)
req$full_name
req
req2 = data.frame(req)
df = fromJSON(toJSON(req))
install.packages("jsonlite")
install.packages("jsonlite")
library("jsonlite")
df = fromJSON(toJSON(req))
df = fromJSON(toJSON(content(req))
)
library(httr)
library("httpuv")
df = fromJSON(toJSON(content(req)))
View(df)
library(dplyr)
library("dplyr")
install.packages("dplyr")
library("dplyr")
setwd("~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis")
source('~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis/S2_E1_SOS_data.R', echo=TRUE)
setwd("~/Dropbox/Thesis PhD isA/Experiments/S1_E1")
source('~/Dropbox/Thesis PhD isA/Experiments/S1_E1/analyzeData.R', echo=TRUE)
setwd("~/Dropbox/Thesis PhD isA/Experiments/S1_E1")
source('~/Dropbox/Thesis PhD isA/Experiments/S1_E1/CIAP-poster-boxplots.R', echo=TRUE)
source('~/Dropbox/Thesis PhD isA/Experiments/S1_E1/CIAP-poster-boxplots.R', echo=TRUE)
setwd("~/Dropbox/Thesis PhD isA/Experiments/S1_E1")
source('~/Dropbox/Thesis PhD isA/Experiments/S1_E1/compute_means.R', echo=TRUE)
source('~/Dropbox/Thesis PhD isA/Experiments/S1_E1/compute_means.R', echo=TRUE)
setwd("~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis")
source('~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis/S2_E1_SOS_data.R', echo=TRUE)
source('~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis/S2_E1_SOS_data.R', echo=TRUE)
View(data2)
source('~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis/S2_E1_SOS_data.R', echo=TRUE)
View(data3)
source('~/Desktop/Experiments/S2_E1_SOS/S2_E1_SOS/R data analysis/S2_E1_SOS_data.R', echo=TRUE)
View(data3)
out = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(data2$vocoder))
{
for (j in unique(data2$TMR))
{
out[row,"vocoder"] = i
out[row,"TMR"] = j
out[row,"mean_perf"] = mean(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"])
out[row,"stdev_perf"] = sd(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"])
}
}
View(out)
out = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(data2$vocoder))
{
for (j in unique(data2$TMR))
{
out[row,"vocoder"] = i
out[row,"TMR"] = j
out[row,"mean_perf"] = mean(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"])
out[row,"stdev_perf"] = sd(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"])
row = row+1
}
}
View(out)
out = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(data2$vocoder))
{
for (j in unique(data2$TMR))
{
out[row,"vocoder"] = i
out[row,"TMR"] = j
out[row,"mean_perf"] = mean(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"], na.rm=TRUE)
out[row,"stdev_perf"] = sd(data3[(data3$vocoder == i)
& (data3$TMR == j),"percent_correct"], na.rm=TRUE)
row = row+1
}
}
View(out)
out <- na.omit(out)
View(out)
colours = c("red","blue","black")
for (i in unique(data2$vocoder))
{
ydata = out$mean_perf[out$vocoder == i]
plot(out$TMR[out$vocoder == i],ydata, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p")
#         plot(1:length(unique(data2$TMR[data2$vocoder == i])),ydata, pch = "o",
#              xlab = "TMR", ylab = "Precentage correct responses",
#              main = "Speech-on-Speech performance", col = colours[i+1], type = "o")
#lines(1,S[1],col = colours[i+1],type = "p", pch = "o")
#lines(2,S[2],col = colours[i+1],type = "p", pch = "o")
}
colours = c("red","blue","black")
for (i in unique(data2$vocoder))
{
avg = out$mean_perf[out$vocoder == i]
sdev = out$stdev_perf[out$vocoder == i]
x = out$TMR[out$vocoder == i]
plot(x,avg, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p")
arrows(x, avg-sdev, x, avg+sdev, length=0.05, angle=90, code=3)
#axis(side = 1, at = x, labels = voc_ticks)
}
for (i in unique(data2$vocoder))
{
avg = out$mean_perf[out$vocoder == i]
sdev = out$stdev_perf[out$vocoder == i]
x = out$TMR[out$vocoder == i]
plot(x,avg, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p")
arrows(x, avg-sdev, x, avg+sdev, length=0.005, angle=90, code=3)
#axis(side = 1, at = x, labels = voc_ticks)
}
colours = c("red","blue","black")
ylims = c(0,100)
for (i in unique(data2$vocoder))
{
avg = out$mean_perf[out$vocoder == i]
sdev = out$stdev_perf[out$vocoder == i]
x = out$TMR[out$vocoder == i]
plot(x,avg, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p",
ylim = ylims)
arrows(x, avg-sdev, x, avg+sdev, length=0.05, angle=90, code=3)
#axis(side = 1, at = x, labels = voc_ticks)
}
sd(c(100,100,100,0))
mean(c(100,100,100,0))
out = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(data3$vocoder))
{
for (j in unique(data3$TMR))
{
for (k in unique(data3$subject))
{
out[row,"vocoder"] = i
out[row,"TMR"] = j
out[row,"mean_perf"] = mean(data3[(data3$subject == k) &
(data3$vocoder == i) & (data3$TMR == j),
"percent_correct"], na.rm=TRUE)
out[row,"stdev_perf"] = sd(data3[(data3$subject == k) &
(data3$vocoder == i) & (data3$TMR == j),
"percent_correct"], na.rm=TRUE)
row = row+1
}
}
}
out <- na.omit(out)
View(out)
out = data.frame(vocoder = 0, TMR = 0, perf = 0)
row = 1
for (i in unique(data3$vocoder))
{
for (j in unique(data3$TMR))
{
for (k in unique(data3$subject))
{
out[row,"vocoder"] = i
out[row,"TMR"] = j
out[row,"perf"] = mean(data3[(data3$subject == k) &
(data3$vocoder == i) & (data3$TMR == j),
"percent_correct"], na.rm=TRUE)
#                         out[row,"stdev_perf"] = sd(data3[(data3$subject == k) &
#                                 (data3$vocoder == i) & (data3$TMR == j),
#                                 "percent_correct"], na.rm=TRUE)
row = row+1
}
}
}
out <- na.omit(out)
View(out)
out2 = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(out$vocoder))
{
for (j in unique(out$TMR))
{
out2[row,"vocoder"] = i
out2[row,"TMR"] = j
out2[row,"perf"] = mean(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
out2[row,"stdev_perf"] = sd(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
row = row+1
}
}
out2 <- na.omit(out2)
View(out2)
out2 = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(out$vocoder))
{
for (j in unique(out$TMR))
{
out2[row,"vocoder"] = i
out2[row,"TMR"] = j
out2[row,"perf"] = mean(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
out2[row,"stdev_perf"] = sd(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
row = row+1
}
}
View(out2)
out2 = data.frame(vocoder = 0, TMR = 0, mean_perf = 0, stdev_perf = 0)
row = 1
for (i in unique(out$vocoder))
{
for (j in unique(out$TMR))
{
out2[row,"vocoder"] = i
out2[row,"TMR"] = j
out2[row,"mean_perf"] = mean(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
out2[row,"stdev_perf"] = sd(out[(out$vocoder == i) & (out$TMR == j),
"perf"], na.rm=TRUE)
row = row+1
}
}
out2 <- na.omit(out2)
View(out2)
colours = c("red","blue","black")
ylims = c(0,100)
for (i in unique(data2$vocoder))
{
avg = out$mean_perf[out$vocoder == i]
sdev = out$stdev_perf[out$vocoder == i]
x = out$TMR[out$vocoder == i]
plot(x,avg, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p",
ylim = ylims)
arrows(x, avg-sdev, x, avg+sdev, length=0.05, angle=90, code=3)
#axis(side = 1, at = x, labels = voc_ticks)
}
colours = c("red","blue","black")
ylims = c(0,100)
for (i in unique(out2$vocoder))
{
avg = out2$mean_perf[out2$vocoder == i]
sdev = out2$stdev_perf[out2$vocoder == i]
x = out2$TMR[out2$vocoder == i]
plot(x,avg, pch = "o",
xlab = "TMR", ylab = "Precentage correct responses",
main = "Speech-on-Speech performance", col = colours[i+1], type = "p",
ylim = ylims)
arrows(x, avg-sdev, x, avg+sdev, length=0.05, angle=90, code=3)
#axis(side = 1, at = x, labels = voc_ticks)
}
